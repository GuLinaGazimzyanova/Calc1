import java.util.Scanner;



public class Calc1 {
    static int a;//переменая для проведения операция равно d[0]
    static  int b; //переменая для проведения операция равно d[2]
    public static String vvod; // операция от пользователя
    static String[] d; //массив от пользователя
   // static String k1; //переменная чтобы передать 1 переменную из массива
   // static String k2; //переменная чтобы передать 2 переменную из массива
   // static String k3; // временная переменная для поиска нужного и проверки
   // static String k4; // временная переменная для поиска нужного и проверки
    static int vivod; // финальная переменная чтобы вывести ответ на экран
    static boolean rome_or_arab;
    static String  [] rome = new String[]{"0", "I", "II", "III", "IV", "V", "VI", "VII","VIII","IX", "X", "XI","XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV",  "XXV", "XXVI","XXVII", "XXVIII", "XXIX", "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI", "XXXVII", "XXXVIII", "XXXIX", "XL", "XLI", "XLII", "XLIII", "XLIV", "XLV", "XLVI", "XLVII", "XLVIII", "XLIX", "L", "LI", "LII", "LIII", "LIV", "LV", "LVI", "LVII", "LVIII", "LIX", "LX", "LXI", "LXII", "LXIII", "LXIV", "LXV", "LXVI", "LXVII", "LXVIII", "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV", "LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII", "LXXXIV", "LXXXV", "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "XCI", "XCII", "XCIII", "XCIV", "XCV", "XCVI", "XCVII", "XCVIII", "XCIX", "C"};
    static int [] arab = new int [] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};

    public static void main (String[] d)  {
        Scanner in = new Scanner(System.in);
        System.out.println("Введите выражение: ");
        vvod = in.nextLine();
        d = vvod.split("");
        for (int i=0; i<100;i++)
        {
            rome_or_arab = d[0].equals(rome[i]);
            if (rome_or_arab == true)
            {
                convertToRome();
            }
            else
            {
                convertToArab ();
            }
        }
        convertToRome();
        try {
            finish();
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }


    }
    public static void convertToRome()
    {
        for (int i=0; i<100;i++)
        {
            rome_or_arab = d[0].equals(rome[i]);
            if (rome_or_arab == true)
            {
                a = arab[i];
            }

        }
        for (int i=0; i<100;i++)
        {
            rome_or_arab = d[2].equals(rome[i]);
            if (rome_or_arab == true)
            {
                a = arab[i];
            }

        }
    }
    public static void convertToArab ()
    {
        a = Integer.parseInt(d[0]);
        b = Integer.parseInt(d[2]);
    }
    public static void finish () throws IllegalAccessException
    {
        switch (d[1]) {
            case "-":
                vivod = a - b;
                break;
            case "+":
                vivod = a + b;
                break;
            case "/":
                vivod = a / b;
                break;
            case "*":
                vivod = a * b;
                break;
            default:
                throw new IllegalAccessException("ошибка. проверьте данные");
        }
        for (int i=0; i<100;i++)
        {
            rome_or_arab = d[0].equals(rome[i]);
            if (rome_or_arab == true)
            {
                for (int l=0; l<=vivod; l++)
                {
                    vivod = Integer.parseInt(rome [l]);
                    System.out.println(vivod);
                }
            }
            else
            {
                System.out.println(vivod);
            }
        }


    }
}
